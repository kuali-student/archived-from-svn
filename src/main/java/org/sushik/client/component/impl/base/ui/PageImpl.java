/*
 * Copyright 2010 Wright Communications, Inc
 *
 * All rights reserved.
 */
package org.sushik.client.component.impl.base.ui;

/*
 * WARNING - DO NOT UPDATE MANUALLY
 * This class was automatically generated by the Sushi-K generator
 */
import com.google.gwt.user.client.ui.VerticalPanel;
import java.util.List;
import org.sushik.client.component.infc.base.ui.NestedComponent;
import org.sushik.client.component.infc.base.ui.Page;
import org.sushik.client.component.infc.base.ui.PageScreenArea;
import org.sushik.client.component.infc.factory.ComponentEnum;


/**
 * An abstract object that defines a unit of user interaction
 *
 * Configured as follows:
 *
 */
public class PageImpl extends ContainerImpl
    implements Page
{

 public PageImpl ()
 {
  super ();
 }

 private VerticalPanel page;

 @Override
 public Object getImpl ()
 {
  return page;
 }

 @Override
 public void hide ()
 {
  page.setVisible (false);
 }

 @Override
 public void init (NestedComponent parent)
 {
  new NestedComponentHelper (this).init (parent);
  page = new VerticalPanel ();
 }

 @Override
 public void show ()
 {
  page.setVisible (true);
 }


 private String pageTitle;

	/**
	* Set pageTitle
	*
	* required
	*
	* Title for the page
	*/
	@Override
	public void setPageTitle (String pageTitle)
	{
		this.pageTitle = pageTitle;
	}

	/**
	* Get pageTitle
	*
	* required
	*
	* Title for the page
	*/
	@Override
	public String getPageTitle ()
	{
		return this.pageTitle;
	}


	private String linkTitle;

	/**
	* Set linkTitle
	*
	* optional
	*
	* Optional shorter title to be used in places like the breadcrumb links
	*/
	@Override
	public void setLinkTitle (String linkTitle)
	{
		this.linkTitle = linkTitle;
	}

	/**
	* Get linkTitle
	*
	* optional
	*
	* Optional shorter title to be used in places like the breadcrumb links
	*/
	@Override
	public String getLinkTitle ()
	{
		return this.linkTitle;
	}


	private String contextTitle;

	/**
	* Set contextTitle
	*
	* optional
	*
	* Optional title to be displayed to show the context of the page.  For example
	* the title of the proposal being edited
	*/
	@Override
	public void setContextTitle (String contextTitle)
	{
		this.contextTitle = contextTitle;
	}

	/**
	* Get contextTitle
	*
	* optional
	*
	* Optional title to be displayed to show the context of the page.  For example
	* the title of the proposal being edited
	*/
	@Override
	public String getContextTitle ()
	{
		return this.contextTitle;
	}


	private List<String> pageParameterNames;

	/**
	* Set pageParameterNames
	*
	* optional
	*
	* unique name of the parameter
	*/
	@Override
	public void setPageParameterNames (List<String> pageParameterNames)
	{
		this.pageParameterNames = pageParameterNames;
	}

	/**
	* Get pageParameterNames
	*
	* optional
	*
	* unique name of the parameter
	*/
	@Override
	public List<String> getPageParameterNames ()
	{
		return this.pageParameterNames;
	}


	private List<String> pageParameterValues;

	/**
	* Set pageParameterValues
	*
	* optional
	*
	* Corresponding value of the parameter
	*/
	@Override
	public void setPageParameterValues (List<String> pageParameterValues)
	{
		this.pageParameterValues = pageParameterValues;
	}

	/**
	* Get pageParameterValues
	*
	* optional
	*
	* Corresponding value of the parameter
	*/
	@Override
	public List<String> getPageParameterValues ()
	{
		return this.pageParameterValues;
	}


	private ComponentEnum previousPage;

	/**
	* Set previousPage
	*
	* optional
	*
	* Last page user visited prior to this page
	*/
	@Override
	public void setPreviousPage (ComponentEnum previousPage)
	{
		this.previousPage = previousPage;
	}

	/**
	* Get previousPage
	*
	* optional
	*
	* Last page user visited prior to this page
	*/
	@Override
	public ComponentEnum getPreviousPage ()
	{
		return this.previousPage;
	}


	private List<String> previousPageParameterNames;

	/**
	* Set previousPageParameterNames
	*
	* optional
	*
	* unique name of the parameter
	*/
	@Override
	public void setPreviousPageParameterNames (List<String> previousPageParameterNames)
	{
		this.previousPageParameterNames = previousPageParameterNames;
	}

	/**
	* Get previousPageParameterNames
	*
	* optional
	*
	* unique name of the parameter
	*/
	@Override
	public List<String> getPreviousPageParameterNames ()
	{
		return this.previousPageParameterNames;
	}


	private List<String> previousPageParameterValues;

	/**
	* Set previousPageParameterValues
	*
	* optional
	*
	* Corresponding value of the parameter
	*/
	@Override
	public void setPreviousPageParameterValues (List<String> previousPageParameterValues)
	{
		this.previousPageParameterValues = previousPageParameterValues;
	}

	/**
	* Get previousPageParameterValues
	*
	* optional
	*
	* Corresponding value of the parameter
	*/
	@Override
	public List<String> getPreviousPageParameterValues ()
	{
		return this.previousPageParameterValues;
	}


	private PageScreenArea pageScreenArea;

	/**
	* Set pageScreenArea
	*
	* required
	*
	* The screen area within which this pages sits
	*/
	@Override
	public void setPageScreenArea (PageScreenArea pageScreenArea)
	{
		this.pageScreenArea = pageScreenArea;
	}

	/**
	* Get pageScreenArea
	*
	* required
	*
	* The screen area within which this pages sits
	*/
	@Override
	public PageScreenArea getPageScreenArea ()
	{
		return this.pageScreenArea;
	}

	
}


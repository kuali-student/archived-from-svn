#!/bin/bash

# Jenkins script to perform an all in one AFT test
#
# written by Orlando Ramirez (orlando.ramirezmartinez@utoronto.ca)
# enhanced by Haroon Rafique (haroon.rafique@kuali.org)

REPO_PREFIX="https://svn.kuali.org/repos/student/enrollment/ks-deployments/tags/builds/ks-deployments-2.1/2.1.1-FR2-M1/"
# maven version 3.0 on jenkins
MVN="mvn30"

# tomcat variables
TOMCAT_VERSION=6.0.41
CATALINA_HOME=${WORKSPACE}/tomcat
CATALINA_OPTS="-Xms512m -Xmx4g -XX:MaxPermSize=512m -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -XX:+PrintTenuringDistribution -Xloggc:${WORKSPACE}/tomcat/logs/heap.log -XX:HeapDumpPath=${WORKSPACE}/tomcat/logs -XX:+HeapDumpOnOutOfMemoryError"

function usage() {
  cat <<EOT
Usage: $ME

    --debug
        Enable debug messages during execution
    --help
        Print this message and exit.

EOT
    exit 0
}


function dbgprint() {
  if [ $DEBUG -ne 0 ]; then
    set +x
    msg="$(date +%Y-%m-%d-%H:%M):"
    msg="$msg ${FUNCNAME[1]}: "
    for arg in $*
    do
      msg="$msg $arg"
    done
    echo -e "$msg"
    set -x
  fi
}

function get_latest_stable_build() {
  dbgprint

  OPT=""
  if [ $DEBUG -eq 0 ]; then OPT="-s"; fi
  BUILD_NUMBER=$(curl $OPT -k https://ci.kuali.org/job/ks-enr-1.0-nightly-build/lastStableBuild/buildNumber)
  if [ $? -gt 0 ]; then
    echo "${FUNCNAME[0]}: Could not get the latest stable build number!"
    exit 1;
  fi
  echo "${FUNCNAME[0]}: Latest Stable Build Number found: ${BUILD_NUMBER}"
}

function svn_export() {
  dbgprint
  if [ "$1" ]; then
    dbgprint "Exporting repo $1"

    OPT=""
    if [ $DEBUG -eq 0 ]; then OPT="-q"; fi
    svn $OPT export --force $1 $2
    if [ $? -gt 0 ]; then
      echo "${FUNCNAME[0]}: svn export failed."
      exit 1;
    fi
    echo "${FUNCNAME[0]}: svn repo $1 successfully exported"
  fi
}

function initialize_schema() {
  dbgprint
  cd ${WORKSPACE}/ks-impex-bundled-db-build-${BUILD_NUMBER}

  # load bundled schema
  set -x
  ${MVN} initialize -Pdb,oracle \
    -Doracle.dba.url=jdbc:oracle:thin:@oracle.ks.kuali.org:1521:ORACLE \
    -Doracle.dba.username=master \
    -Djdbc.username=KSAFT${BUILD_NUMBER} -Djdbc.username=KSAFT${BUILD_NUMBER}
  if [ $? -gt 0 ]; then
    echo "${FUNCNAME[0]}: mvn initialize failed."
    exit 1;
  fi
  set +x
}

function download_tomcat() {
  dbgprint
  OPT=""
  if [ $DEBUG -eq 0 ]; then OPT="--no-verbose"; fi

  wget $OPT -O /tmp/apache-tomcat-$TOMCAT_VERSION.tar.gz \
    http://archive.apache.org/dist/tomcat/tomcat-6/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz
  if [ $? -gt 0 ]; then
    echo "${FUNCNAME[0]}: tomcat download failed."
    exit 1;
  fi

  # stop building if md5sum does not match
  echo "aaf541df90a5f6160e43177ba8e6ec1e  /tmp/apache-tomcat-$TOMCAT_VERSION.tar.gz" | \
    md5sum -c
  if [ $? -gt 0 ]; then
    echo "${FUNCNAME[0]}: tomcat md5sum failed."
    exit 1;
  fi
  echo "${FUNCNAME[0]}: download tomcat $TOMCAT_VERSION."
}

function extract_tomcat() {
  dbgprint
  mkdir -p ${WORKSPACE}/tomcat

  tar xzf /tmp/apache-tomcat-$TOMCAT_VERSION.tar.gz --strip-components=1 \
    -C ${WORKSPACE}/tomcat
  if [ $? -gt 0 ]; then
    echo "${FUNCNAME[0]}: tomcat extraction failed."
    exit 1
  fi
  echo "${FUNCNAME[0]}: extracted tomcat to ${WORKSPACE}/tomcat."
}

function install_maven_dependency_plugin() {
  dbgprint

  set -x
  ${MVN} org.apache.maven.plugins:maven-dependency-plugin:2.8:get \
        -Dartifact=org.apache.maven.plugins:maven-dependency-plugin:2.8:jar
  if [ $? -gt 0 ]; then
    echo "${FUNCNAME[0]}: installation of maven dependency plugin failed."
    exit 1
  fi
  set +x

  echo "${FUNCNAME[0]}: installed maven dependency plugin."
}

function install_oracle_driver() {
  dbgprint

  ${MVN} org.apache.maven.plugins:maven-dependency-plugin:2.8:copy \
    -Dartifact=com.oracle:ojdbc6_g:11.2.0.2:jar \
    -DoutputDirectory=${WORKSPACE}/tomcat/lib
  if [ $? -gt 0 ]; then
    echo "${FUNCNAME[0]}: installation of oracle driver failed."
    exit 1
  fi
  echo "${FUNCNAME[0]}: installed oracle driver."
}

function setup_tomcat() {
  dbgprint

  rm -rf ${WORKSPACE}/tomcat/webapps/*
  cat > ${WORKSPACE}/tomcat/conf/server.xml <<EOT
<?xml version='1.0' encoding='utf-8'?>
<Server port="8005" shutdown="SHUTDOWN">
  <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
  <Listener className="org.apache.catalina.core.JasperListener" />
  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
  <Listener className="org.apache.catalina.mbeans.ServerLifecycleListener" />
  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
  <Service name="Catalina">
    <Connector port="8080" protocol="HTTP/1.1" 
               connectionTimeout="20000" 
               redirectPort="8443" />
    <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" />
    <Engine name="Catalina" defaultHost="localhost">
      <Host name="localhost"  appBase="webapps"
            unpackWARs="true" autoDeploy="true"
            xmlValidation="false" xmlNamespaceAware="false">
        <Context docBase="${WORKSPACE}/tomcat" path="/tomcat"/>
        <Context docBase="${user.home}" path="/home"/>
      </Host>
    </Engine>
  </Service>
</Server>
EOT
  if [ $? -gt 0 ]; then
    echo "${FUNCNAME[0]}: tomcat setup failed."
    exit 1
  fi
  echo "${FUNCNAME[0]}: tomcat setup finished."
}

function set_debug_mode {
  let "DEBUG+=1"
  set -x
}

function process_args {
  DEBUG=0
  BUILD_NUMBER=0

  ARGS=$(getopt --options h --longoptions "help,debug" --name "$ME" -- "$@");
  if [ $? -ne 0 ]; then usage; fi
  eval set -- "$ARGS";
  while true
  do
    case "$1" in
      -h|--help)
        usage;
        shift;
        ;;
      --debug)
        set_debug_mode
        shift;
        ;;
      --)
        shift;
        break;
    esac
  done
}

ME=$(basename $0)

# process all of our command line arguments
process_args "$@"

# retrieve latest stable build number
get_latest_stable_build

# export sources from svn repo to specified path
svn_export \
  ${REPO_PREFIX}/build-${BUILD_NUMBER}/ks-dbs/ks-impex/ks-impex-bundled-db \
  ${WORKSPACE}/ks-impex-bundled-db-build-${BUILD_NUMBER}

# initialize schema (using impex)
#initialize_schema

# download tomcat
download_tomcat

# extract tomcat
extract_tomcat

# install maven dependency plugin
install_maven_dependency_plugin

# install oracle driver
install_oracle_driver

# setup tomcat
setup_tomcat

# vim: tabstop=2 shiftwidth=2

package com.sigmasys.kuali.ksa.rm;

import java.math.BigDecimal;
import java.util.Date;


/**
 * * A transaction is an abstract class that is used to generate different types of transactions within the system.
 * * @author Paul Heald
 * *
 */
public abstract class Transaction {

    /**
     * the UUID of the transaction.
     */
    String transactionId;
    /**
     * the identifier of the transaction as generated by another external system. Where the transaction is generated locally, then transactionId and the externalId will be the same.
     */
    String externalId;
    /**
     * This is the date that the transaction is entered in the ledger. It is set when the transaction is instantiated.
     */
    Date ledgerDate;
    /**
     * This is the date that the transaction is considered effective, allowing, for example, a college to assess fees in summer that are not 'due' until the fall.
     */
    Date effectiveDate;
    /**
     * This is the date that the transaction originated, so, for example, housing might bill on a certain day, but upload its transactions only once a week. This date can be used to trace a transaction back in the originating system.
     */
    Date originationDate;
    /**
     * This is the value of the transaction in the system currency. This is the number that is used as the core value of the transaction.
     */
    BigDecimal ledgerAmount;
    /**
     * This is the native amount of the transaction in the currency in which it was created. For most transactions, this will be identical to the localAmount, as most transactions occur in the local currency.
     */
    BigDecimal nativeAmount;
    /**
     * This is the identifier for the currency that is used in nativeAmount. Most often, it will be set to the same value as the system currency. This is a 3-letter ISO4217 code. For example, USD, GBP, EUR.
     */
    String currencyId;
    /**
     * This flag, when true, indicates that the transaction is 'internal', and will not, in most cases, be displayed to the customer. In most cases, internal transactions will be allocated and locked against an equivalent transaction. An example of this would be if a charge is incorrectly applied to an account, a reversal transaction would be created, the transactions could then be allocated together, and marked as internal.
     */
    boolean internalTransaction;
    /**
     * This is the amount of the transaction that has been allocated. For example, if a $1000 payment is put towards a $2000 charge, the $1000 will have a $1000 allocation amount, and the $2000 charge will have a $1000 allocation amount. The PA module is responsible for allocating charges to payments.
     */
    BigDecimal allocatedAmount;
    /**
     * This value is set to a value (up to the maximum of localAmount) and is the value of the transaction that has been allocated, and may not be reallocated by the payment application routine. Most commonly, the entire transaction will be locked, by setting the lockedAllocationAmount to the localValue.
     */
    BigDecimal lockedAllocationAmount;
    /**
     * This is the code for the transaction, and it defines the type of the transaction. The transaction code for charges are responsible for indicating the priority of the charge, and the general ledger accounts that the charge relates to. The code for payments also indicate priority, as well as restrictions that are placed on the payment, including processing times, refund rule, and the charges to which they may be applied. This functionality is still being determined.
     */
    String transctionType;
    /**
     * The responsible entity is the entity that created the transaction. It is assumed the identity will be derived from KIM.
     */
    String responsibleEntity;
    /**
     * The text for the transaction that will be displayed as a summary of the transaction on statements. For example "Bookstore Purchase"
     */
    String statementText;
    /**
     * A reference to an external document that gives more granular information about the transaction. This information will be different depending on the type of transaction. The information will be available when a user "drills down" into a transaction. It will contain information relating to the charge or payment, such as the contact details for the department who generated a charge, and other information as made available by the system. For example, a charge from the bookstore may list the items purchased. The document referenced will be an XML document, allowing flexible creation of different document types by the institutions themselves. Some basic document types will be defined by the project.
     */
    String documentReference;


    /**
     * This will allocate the value of amount on the transaction. A check will be made to ensure that the allocated amount
     * *  is equal to or less than the localAmount, less any lockedAllocationAmount. The expectation is that this method will only
     * *  be called by the payment application module.
     * *
     * * It can throw the following exceptions: (I don't fully know how to establish exceptions, so if you could give me some pointers, that would be great.)
     * * AmountExceedsAvailableValue
     * *
     * *
     * *
     */
    public void allocateAmount(BigDecimal amount) {
    }

    /**
     * This will allocate a locked amount on the transaction. A check will be made to ensure that the lockedAmount and the allocateAmount don't exceed the ledgerAmount
     * * of the transaction. Setting an amount as locked prevents the payment application system from reallocating the balance elsewhere.
     */
    public void allocateLockedAmount(BigDecimal amount) {

    }

    /**
     * This method can set the internal switch on or off for a transaction. I cannot think of a time when an internal transaction would
     * * not also be locked (tbd) so we should ensure that if a transaction is being set to internal, its lockedAllocationAmount == ledgerAmount
    */
    public void setInternal(boolean internal) {

    }


    public void setDocumentReference(String newDocumentReference) {

    }


}
	



